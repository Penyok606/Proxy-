Типи замісника
Кеш проксі. Кеш проксі покращує продуктивність реального об'єкта, коли вони виконують довгі операції, а результат цих операцій рідко змінюється. Наприклад, реальний об'єкт містить метод, що рахує прості числа. При першому виклику проксі делегує операцію реальному об'єкту і зберігає результат повернення. При всіх наступних викликах, проксі повертає кешовану інформацію.
Проксі захисту. Проксі захисту, додає рівень захисту над реальним об'єктом. Наприклад, реальний об'єкт може отримати доступ до бази даних і повернути конфіденційні дані користувачу. Проксі-захисник міг би додати методи або властивості, які дозволяють клієнтському об'єкту забезпечити відповідну аутентифікацію, перш ніж повернути дані. Він також може фільтрувати дані відповідно до прав автентифікованого користувача.
Віддалений проксі. Віддалений проксі-сервер надає локальний об'єкт, який посилається на реальний об'єкт в іншому місці, як правило, через мережеве з'єднання. Проксі виконує необхідні дії для кодування запитів на передачу мережі і приймає результати від віддаленого ресурсу, перш ніж повертати їх клієнту. Звичайний приклад віддаленого проксі-сервера - це локальний клас, створений Visual Studio для забезпечення доступу до вебслужби.
Розумний проксі. Розумний проксі додає додаткову функціональність реальному об'єкта. Ця функціональність часто невидима для клієнта. Наприклад, підрахунок існуючих посилань на ресурсомісткий об'єкт таким чином, що коли лічильник досягне нуля, дані об'єкта можуть бути видалені з пам'яті. Можна також використовувати розумний проксі для логування викликів користувача до реального об'єкта.
Віртуальний проксі. Віртуальний проксі забезпечує спрощену версію складного об'єкта. Тільки тоді, коли потрібні дані реального об'єкта, лише тоді він створюється, забезпечуючи форму лінивої ініціалізації. Наприклад, провідник Windows, може відобразити файли, який видно на екрані. При отриманні списку файлів, ім'я файлу, розмір та інша легка для отримання інформація зберігатиметься в об'єктах проксі. Тільки при команді "перегляд документа", реальний об'єкт буде створено і заповнено повним вмістом файлу, оскільки вони доступні повільніше і потребують більше пам'яті.
Переваги
віддалений замісник;
віртуальний замісник може виконувати оптимізацію;
захищає замісника;
«Розумне» посилання (вказівник);
Недоліки
Різко збільшує час відгуку

#include <iostream>

using namespace std;

struct ProxyBase
{
	virtual void f() = 0;
	virtual void g() = 0;
	virtual void h() = 0;
	virtual ~ProxyBase() {}
};
struct Implementation1 : public ProxyBase
{
	void f() { cout << " Implementation1.f()" << endl; }
	void g() { cout << " Implementation1.g()" << endl; }
	void h() { cout << " Implementation1.h()" << endl; }
};
struct Implementation2 : public ProxyBase
{
	void f() { cout << " Implementation2.f()" << endl; }
	void g() { cout << " Implementation2.g()" << endl; }
	void h() { cout << " Implementation2.h()" << endl; }
};
class Proxy : public ProxyBase
{
private:
	ProxyBase* implementation;
public:
	Proxy(ProxyBase* pb) { implementation = pb; }
	~Proxy() { delete implementation; }
	void f() { implementation->f(); }
	void g() { implementation->g(); }
	void h() { implementation->h(); }
};
void main()
{
	Proxy p(new Implementation2);
	p.f();
	p.g();
	p.h();
}
